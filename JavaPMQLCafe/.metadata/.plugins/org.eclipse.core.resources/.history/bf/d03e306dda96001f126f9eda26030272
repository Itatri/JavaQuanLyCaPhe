import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class frmQuanLyMenu {
    private static final String URL = "jdbc:mariadb://localhost:3306/your_database"; // Thay thế your_database bằng tên cơ sở dữ liệu của bạn
    private static final String USER = "your_username"; // Thay thế your_username bằng tên người dùng của bạn
    private static final String PASSWORD = "your_password"; // Thay thế your_password bằng mật khẩu của bạn

    private JTable tableCTDonHang; // Giả định bạn đã tạo bảng này
    private JTable tableSanPham; // Giả định bạn đã tạo bảng này
    private JScrollPane scrollPane_DSSP; // Giả định bạn đã tạo scrollPane này
    private JTextArea textAreaTongTienCongLai; // Giả định bạn đã tạo textArea này
    private Vector<Vector<Object>> orderDetails;
    private TableRowSorter<DefaultTableModel> rowSorter;

    // Các phương thức khác...

    private Connection getConnection() {
        try {
            Class.forName("org.mariadb.jdbc.Driver"); // Đảm bảo sử dụng driver của MariaDB
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    private int getMaDonHang() {
        int maDonHang = -1;
        try (Connection conn = getConnection()) {
            if (conn != null) {
                String query = "SELECT MaDonHang FROM donhang ORDER BY MaDonHang DESC LIMIT 1";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                if (rs.next()) {
                    maDonHang = rs.getInt("MaDonHang");
                }
                rs.close();
                stmt.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return maDonHang;
    }

    private Vector<Vector<Object>> getOrderDetails() {
        DefaultTableModel model = (DefaultTableModel) tableCTDonHang.getModel();
        Vector<Vector<Object>> orderDetails = new Vector<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            Vector<Object> row = new Vector<>();
            for (int j = 0; j < model.getColumnCount(); j++) {
                row.add(model.getValueAt(i, j));
            }
            orderDetails.add(row);
        }
        return orderDetails;
    }

    private void loadSanPhamToScrollPane() {
        tableSanPham.setBackground(new Color(242, 242, 242));

        DefaultTableModel modelSanPham = new DefaultTableModel();
        modelSanPham.addColumn("Mã Sản Phẩm");
        modelSanPham.addColumn("Tên Sản Phẩm");
        modelSanPham.addColumn("Giá");
        modelSanPham.addColumn("Hình Ảnh");

        Vector<Vector<Object>> dataSanPham = getSanPhamData();

        for (Vector<Object> row : dataSanPham) {
            modelSanPham.addRow(row);
        }

        tableSanPham.setModel(modelSanPham);
        tableSanPham.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());

        int rowHeight = 110;
        tableSanPham.setRowHeight(rowHeight);

        rowSorter = new TableRowSorter<>(modelSanPham);
        tableSanPham.setRowSorter(rowSorter);

        scrollPane_DSSP.setViewportView(tableSanPham);
    }

    private Vector<Vector<Object>> getSanPhamData() {
        Vector<Vector<Object>> data = new Vector<>();
        try (Connection conn = getConnection()) {
            if (conn != null) {
                Statement stmt = conn.createStatement();
                String query = "SELECT MaSanPham, Ten, Gia, LinkSP FROM sanpham";
                ResultSet rs = stmt.executeQuery(query);

                while (rs.next()) {
                    Vector<Object> row = new Vector<>();
                    row.add(rs.getInt("MaSanPham"));
                    row.add(rs.getString("Ten"));
                    row.add(rs.getDouble("Gia"));
                    row.add(rs.getString("LinkSP"));
                    data.add(row);
                }

                rs.close();
                stmt.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return data;
    }

    class ImageRenderer extends DefaultTableCellRenderer {
        private static final long serialVersionUID = 1L;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel();
            if (value != null) {
                String imagePath = value.toString();
                try {
                    ImageIcon icon = new ImageIcon(imagePath);
                    Image image = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                    icon = new ImageIcon(image);
                    label.setIcon(icon);
                    label.setPreferredSize(new Dimension(50, 50));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return label;
        }
    }

    private void calculateAndSetTotal() {
        DefaultTableModel model = (DefaultTableModel) tableCTDonHang.getModel();
        double total = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            total += (double) model.getValueAt(i, 4);
        }
        textAreaTongTienCongLai.setText(String.valueOf(total));
    }

    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) tableCTDonHang.getModel();
        model.setRowCount(0);
        textAreaTongTienCongLai.setText("");
        // maBan = null; // Biến maBan cần được xác định trước
    }

    private void openQuanLySanPhamForm() {
        String loaiTaiKhoan = frmDangNhap.loaiTaiKhoan; // Lấy loại tài khoản từ biến static

        // Kiểm tra nếu loại tài khoản là "Nhân viên", không cho phép mở form thêm sản phẩm mới
        if (loaiTaiKhoan != null && loaiTaiKhoan.equals("Nhân viên")) {
            JOptionPane.showMessageDialog(null, "Bạn không có quyền thực hiện thao tác này.", "Thông báo", JOptionPane.WARNING_MESSAGE);
        } else {
            frmQuanLySanPham menuForm = new frmQuanLySanPham();
            menuForm.setVisible(true);
        }
    }

    private String ganBanTuDong() {
        try (Connection conn = getConnection()) {
            if (conn != null) {
                String query = "SELECT MaBan FROM ban WHERE TrangThai = 'Trống' LIMIT 1";
                try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
                    if (rs.next()) {
                        String maBan = rs.getString("MaBan");
                        String updateQuery = "UPDATE ban SET TrangThai = 'Có người' WHERE MaBan = ?";
                        try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
                            pstmt.setString(1, maBan);
                            pstmt.executeUpdate();
                        }
                        return maBan;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void kiemTraDatBan(String soDienThoai) {
        String query = "SELECT b.MaBan, b.Ten, b.TrangThai, kh.Ten AS TenKhachHang FROM datcho dc JOIN ban b ON dc.MaBan = b.MaBan JOIN khachhang kh ON dc.MaKhachHang = kh.MaKhachHang WHERE kh.DienThoai = ?";
        try (Connection conn = getConnection(); PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setString(1, soDienThoai);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                String maBan = resultSet.getString("MaBan");
                String tenBan = resultSet.getString("Ten");
                String trangThai = resultSet.getString("TrangThai");
                String tenKhachHang = resultSet.getString("TenKhachHang");
                JOptionPane.showMessageDialog(null, "Khách hàng " + tenKhachHang + " đã đặt bàn. Thông tin bàn: Mã bàn: " + maBan + ", Tên bàn: " + tenBan + ", Trạng thái: " + trangThai, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Khách hàng chưa đặt bàn.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi khi kiểm tra đặt bàn. Vui lòng thử lại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void setOrderDetails() {
        DefaultTableModel modelCTDH = (DefaultTableModel) tableCTDonHang.getModel();
        modelCTDH.setRowCount(0);
        for (Vector<Object> orderDetail : orderDetails) {
            modelCTDH.addRow(orderDetail);
        }
    }

    private void truSanPhamKho(int maSanPham, int soLuong) {
        try {
            Connection conn = getConnection();
            if (conn != null) {
                String query = "UPDATE khohang SET SoLuong = SoLuong - ? WHERE MaSanPham = ?";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setInt(1, soLuong);
                pstmt.setInt(2, maSanPham);
                pstmt.executeUpdate();
                pstmt.close();
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi trừ sản phẩm trong kho.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
}
