package frmQLCafe;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

public class frmQuanLyThanhToan extends JFrame implements Serializable {

    private static final long serialVersionUID = 1L;
    private JTextField txtSoBan;
    private JTextField txtTongTien;
    private JTextField txtDienThoai;
    private JTextField txtTenKH;
    private JCheckBox chkKhachKhongDangKy;
    private JTable table;
    private JComboBox<String> comboBoxPTThanhToan;
    private Connection connection;
    private DefaultTableModel tableModel;
    private BigDecimal totalAmount;
    private Vector<Vector<Object>> orderDetails;
    private String maBan;
    private boolean isTakeAway; 
    private JPanel qrPanel;
    private JLabel qrLabel;

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    frmQuanLyThanhToan window = new frmQuanLyThanhToan(new Vector<>(), new BigDecimal(0), "", false);
                    window.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public frmQuanLyThanhToan(Vector<Vector<Object>> orderDetails, BigDecimal totalAmount, String maBan, boolean isTakeAway) {
        this.orderDetails = orderDetails;
        this.totalAmount = totalAmount;
        this.maBan = maBan;
        this.isTakeAway = isTakeAway;  
        initialize();
        connectToDatabase();
        loadData();
        txtTongTien.setText(totalAmount.toString());
        txtSoBan.setText(maBan); 
    }

    public frmQuanLyThanhToan() {
        this(new Vector<>(), new BigDecimal(0), "", false);
    }

    private void initialize() {
        setTitle("Form Quản Lý Thanh Toán");
        setSize(1032, 700);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);
        setResizable(false); // Không cho phép thay đổi kích thước
        setLocationRelativeTo(null); // Căn giữa màn hình

        JPanel panel = new JPanel();
        panel.setBackground(new Color(0, 0, 0));
        panel.setBounds(0, 0, 1016, 51);
        getContentPane().add(panel);
        panel.setLayout(null);

        JLabel lblNewLabel = new JLabel("THANH TOÁN");
        lblNewLabel.setForeground(new Color(255, 255, 255));
        lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 20));
        lblNewLabel.setBounds(370, 10, 138, 31);
        panel.add(lblNewLabel);

        JPanel panel_1 = new JPanel();
        panel_1.setBackground(new Color(255, 255, 255));
        panel_1.setBounds(0, 50, 1016, 600);
        getContentPane().add(panel_1);
        panel_1.setLayout(null);

        JPanel panel_2 = new JPanel();
        panel_2.setBackground(new Color(255, 255, 255));
        panel_2.setBorder(new TitledBorder(null, "Chi Tiết Thanh Toán", TitledBorder.LEADING, TitledBorder.TOP, null, null));
        panel_2.setBounds(0, 0, 1016, 276);
        panel_1.add(panel_2);
        panel_2.setLayout(null);

        table = new JTable();
        table.setBackground(new Color(242, 242, 242));
        table.setBounds(10, 22, 860, 244);
        tableModel = new DefaultTableModel(
            new Object[][] {},
            new String[] {"Mã Đơn Hàng", "Tên Khách Hàng", "Tên Nhân Viên", "Ngày Đặt Hàng", "Tổng Tiền"}
        );
        table.setModel(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(10, 22, 996, 244);
        panel_2.add(scrollPane);

        JLabel lblSoBan = new JLabel("Số Bàn:");
        lblSoBan.setForeground(new Color(0, 0, 0));
        lblSoBan.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblSoBan.setBounds(10, 318, 179, 22);
        panel_1.add(lblSoBan);

        JLabel lblDienThoai = new JLabel("Số Điện Thoại:");
        lblDienThoai.setForeground(new Color(0, 0, 0));
        lblDienThoai.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblDienThoai.setBounds(10, 350, 179, 22);
        panel_1.add(lblDienThoai);

        JLabel lblTenKH = new JLabel("Tên Khách Hàng:");
        lblTenKH.setForeground(new Color(0, 0, 0));
        lblTenKH.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblTenKH.setBounds(10, 382, 179, 22);
        panel_1.add(lblTenKH);

        JLabel lblPhuongThucThanhToan = new JLabel("Phương Thức Thanh Toán:");
        lblPhuongThucThanhToan.setForeground(new Color(0, 0, 0));
        lblPhuongThucThanhToan.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblPhuongThucThanhToan.setBounds(10, 414, 179, 22);
        panel_1.add(lblPhuongThucThanhToan);

        JLabel lblTongTien = new JLabel("Tổng Tiền:");
        lblTongTien.setForeground(new Color(0, 0, 0));
        lblTongTien.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblTongTien.setBounds(10, 446, 179, 22);
        panel_1.add(lblTongTien);

        txtSoBan = new JTextField();
        txtSoBan.setColumns(10);
        txtSoBan.setBounds(195, 321, 575, 19);
        txtSoBan.setEditable(false);
        panel_1.add(txtSoBan);

        txtDienThoai = new JTextField();
        txtDienThoai.setColumns(10);
        txtDienThoai.setBounds(195, 353, 575, 19);
        panel_1.add(txtDienThoai);

        txtTenKH = new JTextField();
        txtTenKH.setColumns(10);
        txtTenKH.setBounds(195, 385, 575, 19);
        txtTenKH.setEditable(false);
        panel_1.add(txtTenKH);

        chkKhachKhongDangKy = new JCheckBox("Khách không đăng ký");
        chkKhachKhongDangKy.setBounds(195, 417, 200, 19);
        panel_1.add(chkKhachKhongDangKy);
        chkKhachKhongDangKy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                boolean isNotRegistered = chkKhachKhongDangKy.isSelected();
                txtDienThoai.setEditable(!isNotRegistered);
                txtTenKH.setEditable(!isNotRegistered);
                if (isNotRegistered) {
                    txtDienThoai.setText("0000000000");
                    txtTenKH.setText("Khách vãng lai");
                } else {
                    txtDienThoai.setText("");
                    txtTenKH.setText("");
                }
            }
        });

        comboBoxPTThanhToan = new JComboBox<>();
        comboBoxPTThanhToan.setModel(new DefaultComboBoxModel<>(new String[] {"Tiền mặt", "Thẻ", "Ví điện tử", "Chuyển khoản"}));
        comboBoxPTThanhToan.setBounds(195, 449, 575, 19);
        panel_1.add(comboBoxPTThanhToan);

        comboBoxPTThanhToan.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedMethod = (String) comboBoxPTThanhToan.getSelectedItem();
                if ("Chuyển khoản".equals(selectedMethod)) {
                    showQRCode();
                } else {
                    qrPanel.setVisible(false);
                }
            }
        });

        txtTongTien = new JTextField();
        txtTongTien.setBounds(195, 481, 575, 19);
        txtTongTien.setEditable(false);
        panel_1.add(txtTongTien);

        JButton btnXacNhanTT = new JButton("Xác Nhận Thanh Toán");
        btnXacNhanTT.setForeground(new Color(255, 255, 255));
        btnXacNhanTT.setBackground(new Color(34, 139, 34)); // Change color to green
        btnXacNhanTT.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnXacNhanTT.setBounds(10, 548, 220, 29);
        panel_1.add(btnXacNhanTT);

        JButton btnHuy = new JButton("Hủy");
        btnHuy.setForeground(new Color(255, 255, 255));
        btnHuy.setBackground(new Color(220, 20, 60)); // Change color to red
        btnHuy.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnHuy.setBounds(240, 548, 100, 29);
        panel_1.add(btnHuy);

        JButton btnInHoaDon = new JButton("In Hóa Đơn");
        btnInHoaDon.setForeground(new Color(255, 255, 255));
        btnInHoaDon.setBackground(new Color(0, 0, 0));
        btnInHoaDon.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnInHoaDon.setBounds(670, 548, 100, 29);
        panel_1.add(btnInHoaDon);

        JButton btnCheckCustomer = new JButton("Kiểm Tra Khách Hàng");
        btnCheckCustomer.setForeground(new Color(255, 255, 255));
        btnCheckCustomer.setBackground(new Color(70, 130, 180)); // Change color to steel blue
        btnCheckCustomer.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnCheckCustomer.setBounds(480, 548, 180, 29);
        panel_1.add(btnCheckCustomer);

        JButton btnQuayLai = new JButton("Quay Lại");
        btnQuayLai.setForeground(new Color(255, 255, 255));
        btnQuayLai.setBackground(new Color(255, 165, 0)); // Change color to orange
        btnQuayLai.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnQuayLai.setBounds(350, 548, 120, 29);
        panel_1.add(btnQuayLai);
        
        JButton btnThoat = new JButton("Thoát ");
        btnThoat.setForeground(Color.WHITE);
        btnThoat.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnThoat.setBackground(Color.BLACK);
        btnThoat.setBounds(805, 548, 95, 29);
        panel_1.add(btnThoat);
        btnThoat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn thoát không?", "Xác nhận thoát", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    dispose();
                }
            }
        });

        btnQuayLai.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Vector<Vector<Object>> currentOrderDetails = orderDetails;
                BigDecimal currentTotalAmount = new BigDecimal(txtTongTien.getText());
                frmQuanLyMenu menuForm = new frmQuanLyMenu(currentOrderDetails, currentTotalAmount, maBan, isTakeAway);
                menuForm.setVisible(true);
                dispose();
            }
        });

        btnXacNhanTT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (handlePayment()) {
                    JOptionPane.showMessageDialog(null, "Thanh toán thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    saveTransaction();
                }
                loadData();
            }
        });

        btnHuy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                resetForm();
            }
        });

        btnInHoaDon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int maDonHang = getSelectedOrderId();
                if (maDonHang != -1) {
                    frmQuanLyHoaDon invoiceForm = new frmQuanLyHoaDon(maDonHang);
                    invoiceForm.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Vui lòng chọn đơn hàng để in hóa đơn!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        btnCheckCustomer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                checkCustomer();
            }
        });

        qrPanel = new JPanel();
        qrPanel.setBounds(792, 300, 200, 200);
        qrPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        qrPanel.setVisible(false);
        panel_1.add(qrPanel);

        qrLabel = new JLabel();
        qrPanel.add(qrLabel);
        
        JLabel lblQrChuynKhon = new JLabel("QR Chuyển Khoản");
        lblQrChuynKhon.setForeground(Color.BLACK);
        lblQrChuynKhon.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblQrChuynKhon.setBounds(839, 511, 111, 22);
        panel_1.add(lblQrChuynKhon);
    }

    private void connectToDatabase() {
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mariadb://localhost:3306/cafe", "root", "root");
            System.out.println("Kết nối thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Kết nối thất bại!");
        }
    }

    private void loadData() {
        String query = "SELECT dh.MaDonHang, kh.Ten AS TenKhachHang, nv.Ten AS TenNhanVien, dh.NgayDatHang, dh.TongTien " +
                       "FROM donhang dh " +
                       "JOIN khachhang kh ON dh.MaKhachHang = kh.MaKhachHang " +
                       "JOIN nhanvien nv ON dh.MaNhanVien = nv.MaNhanVien";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            ResultSet resultSet = preparedStatement.executeQuery();
            tableModel.setRowCount(0);
            while (resultSet.next()) {
                int maDonHang = resultSet.getInt("MaDonHang");
                String tenKhachHang = resultSet.getString("TenKhachHang");
                String tenNhanVien = resultSet.getString("TenNhanVien");
                String ngayDatHang = resultSet.getString("NgayDatHang");
                BigDecimal tongTien = resultSet.getBigDecimal("TongTien");
                tableModel.addRow(new Object[]{maDonHang, tenKhachHang, tenNhanVien, ngayDatHang, tongTien});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private boolean handlePayment() {
        String soBan = txtSoBan.getText();
        String dienThoai = txtDienThoai.getText();
        String ptThanhToan = (String) comboBoxPTThanhToan.getSelectedItem();
        String tongTienStr = txtTongTien.getText();

        if (chkKhachKhongDangKy.isSelected() || validateInput(soBan, dienThoai, tongTienStr)) {
            try {
                BigDecimal tongTien = new BigDecimal(tongTienStr);
                int customerId = chkKhachKhongDangKy.isSelected() ? createAnonymousCustomer() : getCustomerIdByPhone(dienThoai);
                if (customerId == -1) {
                    customerId = createNewCustomer(dienThoai);
                    if (customerId == -1) {
                        System.out.println("Lỗi khi tạo khách hàng mới.");
                        return false;
                    }
                }

                connection.setAutoCommit(false);

                try (PreparedStatement preparedStatement = connection.prepareStatement(
                        "INSERT INTO donhang (MaKhachHang, MaNhanVien, NgayDatHang, TongTien, PhuongThucThanhToan, MuaMangVe) VALUES (?, ?, NOW(), ?, ?, ?)",
                        PreparedStatement.RETURN_GENERATED_KEYS)) {
                    preparedStatement.setInt(1, customerId);
                    preparedStatement.setInt(2, 1);
                    preparedStatement.setBigDecimal(3, tongTien);
                    preparedStatement.setString(4, ptThanhToan);
                    preparedStatement.setBoolean(5, isTakeAway);  

                    int rowsInserted = preparedStatement.executeUpdate();
                    if (rowsInserted > 0) {
                        ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            int maDonHang = generatedKeys.getInt(1);
                            System.out.println("Đơn hàng được thêm với mã: " + maDonHang);

                            if (insertOrderDetails(maDonHang)) {
                                connection.commit();
                                // Cập nhật thông tin khách hàng lên bàn
                                updateBanWithCustomerInfo(soBan, customerId);
                                return true;
                            } else {
                                connection.rollback();
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    connection.rollback();
                } finally {
                    connection.setAutoCommit(true);
                }
            } catch (NumberFormatException e) {
                System.out.println("Tổng tiền không hợp lệ. Vui lòng kiểm tra lại.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Dữ liệu nhập vào không hợp lệ. Vui lòng kiểm tra lại.");
        }
        return false;
    }

    private void updateBanWithCustomerInfo(String maBan, int maKhachHang) {
        try {
            // Cập nhật trạng thái bàn
            String updateBanQuery = "UPDATE ban SET TrangThai = 'Có người' WHERE MaBan = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(updateBanQuery)) {
                preparedStatement.setString(1, maBan);
                preparedStatement.executeUpdate();
            }

            // Cập nhật thông tin khách hàng
            String updateKhachHangQuery = "INSERT INTO datcho (MaKhachHang, MaBan, ThoiGianDat, SoLuongKhach, GhiChu) VALUES (?, ?, NOW(), 1, '')";
            try (PreparedStatement preparedStatement = connection.prepareStatement(updateKhachHangQuery)) {
                preparedStatement.setInt(1, maKhachHang);
                preparedStatement.setString(2, maBan);
                preparedStatement.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Thông tin khách hàng đã được cập nhật lên bàn.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private int createAnonymousCustomer() {
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                "INSERT INTO khachhang (Ten, DienThoai) VALUES (?, ?)", PreparedStatement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, "Khách vãng lai");
            preparedStatement.setString(2, "0000000000");
            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    private boolean insertOrderDetails(int maDonHang) {
        String query = "INSERT INTO chitietdonhang (MaSanPham, SoLuong, TongTienCongLai, MaDonHang) VALUES (?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            for (Vector<Object> row : orderDetails) {
                int maSanPham = (int) row.get(1);
                int soLuong = (int) row.get(3);
                double tongTienCongLai = (double) row.get(4);

                preparedStatement.setInt(1, maSanPham);
                preparedStatement.setInt(2, soLuong);
                preparedStatement.setDouble(3, tongTienCongLai);
                preparedStatement.setInt(4, maDonHang);

                preparedStatement.addBatch();
            }
            int[] rowsInserted = preparedStatement.executeBatch();
            return rowsInserted.length > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void saveTransaction() {
        String query = "INSERT INTO giaodich (ThoiGianGiaoDich, TongTien, PhuongThucThanhToan, MaNhanVien) VALUES (?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
            preparedStatement.setBigDecimal(2, new BigDecimal(txtTongTien.getText()));
            preparedStatement.setString(3, (String) comboBoxPTThanhToan.getSelectedItem());
            preparedStatement.setInt(4, 1);

            preparedStatement.executeUpdate();
            System.out.println("Giao dịch đã được lưu.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private int createNewCustomer(String dienThoai) {
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                "INSERT INTO khachhang (DienThoai) VALUES (?)", PreparedStatement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, dienThoai);
            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }
    @SuppressWarnings("unused")
    private BigDecimal calculateTotalPrice(String dienThoai) {
        BigDecimal totalPrice = BigDecimal.ZERO;
        String query = "SELECT SUM(ct.TongTienCongLai) " +
                       "FROM chitietdonhang ct " +
                       "JOIN donhang dh ON ct.MaDonHang = dh.MaDonHang " +
                       "JOIN khachhang kh ON dh.MaKhachHang = kh.MaKhachHang " +
                       "WHERE kh.DienThoai = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, dienThoai);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next() && resultSet.getBigDecimal(1) != null) {
                totalPrice = resultSet.getBigDecimal(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return totalPrice;
    }

    private int getCustomerIdByPhone(String dienThoai) {
        int customerId = -1;
        String query = "SELECT MaKhachHang, Ten FROM khachhang WHERE DienThoai = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, dienThoai);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                customerId = resultSet.getInt("MaKhachHang");
                txtTenKH.setText(resultSet.getString("Ten"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customerId;
    }

    private boolean validateInput(String soBan, String dienThoai, String tongTien) {
        if (soBan.isEmpty() && !isTakeAway) { 
            System.out.println("Số bàn không được để trống.");
            return false;
        }
        if (!chkKhachKhongDangKy.isSelected() && dienThoai.isEmpty()) {
            System.out.println("Số điện thoại không được để trống.");
            return false;
        }
        try {
            new BigDecimal(tongTien);
        } catch (NumberFormatException e) {
            System.out.println("Tổng tiền không hợp lệ.");
            return false;
        }
        return true;
    }

    private int getSelectedOrderId() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            Object maDonHangObj = table.getValueAt(selectedRow, 0);
            if (maDonHangObj instanceof Integer) {
                return (int) maDonHangObj;
            } else {
                try {
                    return Integer.parseInt(maDonHangObj.toString());
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;
    }

    private void checkCustomer() {
        String dienThoai = txtDienThoai.getText();
        int customerId = getCustomerIdByPhone(dienThoai);
        if (customerId != -1) {
            JOptionPane.showMessageDialog(null, "Khách hàng cũ. Thông tin sẽ được tự động điền.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Khách hàng mới. Vui lòng nhập thông tin.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            txtTenKH.setText("");
            openCustomerForm();
        }
    }

    private void openCustomerForm() {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    frmQuanLyKhachHang customerForm = new frmQuanLyKhachHang(frmQuanLyThanhToan.this);
                    customerForm.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void refreshCustomerList() {
        loadData();
    }

    public void setNewCustomerInfo(String tenKH, String dienThoai) {
        txtTenKH.setText(tenKH);
        txtDienThoai.setText(dienThoai);
    }

    public void updateOrderDetails(Vector<Vector<Object>> newOrderDetails) {
        for (Vector<Object> newDetail : newOrderDetails) {
            boolean found = false;
            for (Vector<Object> oldDetail : orderDetails) {
                if (oldDetail.get(1).equals(newDetail.get(1))) {
                    int newQuantity = (int) newDetail.get(3);
                    double newTotalPrice = (double) newDetail.get(4);
                    oldDetail.set(3, newQuantity);
                    oldDetail.set(4, newTotalPrice);
                    found = true;
                    break;
                }
            }
            if (!found) {
                orderDetails.add(newDetail);
            }
        }
        loadData();
    }

    public void refreshCustomerList(Vector<Vector<Object>> newOrderDetails, BigDecimal newTotalAmount) {
        orderDetails = newOrderDetails;
        totalAmount = newTotalAmount;
        loadData();
        txtTongTien.setText(totalAmount.toString());
    }

    private void resetForm() {
        txtSoBan.setText("");
        txtDienThoai.setText("");
        txtTenKH.setText("");
        chkKhachKhongDangKy.setSelected(false);
        comboBoxPTThanhToan.setSelectedIndex(0);
        txtTongTien.setText("");
    }

    private void showQRCode() {
        try {
            String amount = txtTongTien.getText().replace(",", "").replace(".", "");
            String qrUrl = "https://qr.sepay.vn/img?bank=MBBank&acc=0328319660&template=compact&amount=" + amount + "&des=Tien+cafe";
            java.net.URL url = new java.net.URL(qrUrl);
            ImageIcon imageIcon = new ImageIcon(url);
            Image image = imageIcon.getImage().getScaledInstance(180, 180, Image.SCALE_SMOOTH);
            qrLabel.setIcon(new ImageIcon(image));
            qrPanel.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Không thể tải mã QR. Vui lòng thử lại sau.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
}
